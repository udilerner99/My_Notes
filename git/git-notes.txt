Installation
====================

1. https://git-scm.com/
2. https://brew.sh
    brew install git

Config
====================

settings to git deployment can be made on 3 levels:
  1. system   /etc/gitconfig
  2. user     ~/.gitconfig
              $HOME\.gitconfig

  system:   git config --system
  user:     git config --global
  project:  git config

setting git user:
    git config --global user.name "<user name>"
setting git email:
    git config --global user.email "email"
list configurations:
    git config --list

git config is on home folder
  cd ~
  \.gitconfig

editor for git
==============
git config --global core.editor "vim"

git auto completion
====================
auto complete commands file path and branch names
https://github.com/git/git

=> /contrib/completion/git_completion.bash

2 options to save :
  1.raw => copy text to text editor
  2.save to user directory => .bash

mv <file> .git-git_completion

edit ~/.bashsrc or ~/.bash_profile
add <if clause for loading the completion bash>

Initialise project repository
==============================
  - create folder
  - git init


where's git stores its files
============================
after running git init, git will create a .git folder, under this folder all git's files will be place, including for example the config file,
so for example if we'll cat the file:
$ cat config
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true

we'll see the content of the configuration setting.
all of git's data is stored in this one folder, deleting it will remove git tracking of this folder content completely.

Git commits
===========

1. tell git to add all of the folder content to the repository (git is still not tracking the changes)
  git add .
2. git commit -m "<message>" (all of the changes we'll make to the files that were added will be tracked)

Commit message best practice
============================
  - short single line summary (less than 50 characters)
  - optionally followed by a blank line and a more complete description
  - each line should be less than 72 characters
  - write commit messages in present tense, not past tense
    the reason is that it describe the change, for example "Fix for a bug" or "fixes a bug"  not "fixed a bug"
  - bullet points are usually asterisks or hyphens
  - can add "tracking numbers" from bugs or support request
  - can develop shorthand for the organisation
    "[css,js]"
    "bugfix:"
    "#38405 -"

View the commit log
===================
1. git log

  return a log of all the commit on the project, with the newest entry on the top.

  for exmaple:

      commit 02219a730d306be711503ee14450175fd0f24b6d (HEAD -> master)
      Author: <user + email>
      Date:   Mon Oct 19 09:32:56 2020 +0300

        initial commit

        first line: unique id number of the commit, will help to identify the commit and track it
        second line: username of the committer
        3rd line: date of the commits
        4th line: commit message

2. git log -n <number>
    show number specified of recent messages

3. git log --since=2019-01-01
    will show all commit since the date specified

4. git log --until=2019-01-01
    will show all commit until the date specified
