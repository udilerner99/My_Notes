before starting developing a python program we'll have some environment settings

PYTHON SETUP
===============

* note: i recommend installing python through pyenv this will allow easier management of python versions

1st. python setup
run {which python} to check your python version and making sure it's setup on
your home path

python(master) > which python
/usr/bin/python

now, i have also python3 already installed so i can run
python(master) > which python3
/usr/bin/python3

if you don't have python installed follow https://www.python.org/downloads/

PYENV SETUP
============

next step will be to make sure we have virtual environment management software like pyenv
i recommend it because it will help us secure our python application dependencies

in order to install pyenv follow https://realpython.com/intro-to-pyenv/#installing-pyenv

shortcut list:

check pyenv versions :
  pyenv versions
    The * indicates that the system Python version is active currently
  setting pyenv working python path version
     pyenv global 3.8.9
  python -V
    check the working python version, and if you run "pyenv versions" you'll see the * indicating the changed working version of pyenv

  from pyenv installation:
    Pro Tip: A great way to get peace of mind that the version of Python you just installed is working properly is to run the built-in test suite:

    $ pyenv global 3.8-dev
    $ python -m test
    This will kick off lots of internal Python tests that will verify your installation. You can just kick back and watch the tests pass.

creating virtual environment:
  - create your project folder and add it to your git repo
  - create your virtual environment:
    pyenv virtualenv {python version} {virtual environment name}
    when naming your environment name make sure it's aligned with python project
  - active your virtual environment: pyenv local {virtual environment}
  - check your virtual environment python version : pyenv which python
    this time the result will under the project and virtual environment path

  from this point any executable will under the virtual environment path
    pyenv which pip

Activating and Deactivating virtual environment
  $ pyenv activate <environment_name>
  $ pyenv deactivate

Setting virtual environment on IDE
==================================
now that virtual environment is setup, you can define the working path when creating the python project on your favourite IDE
just specify the python virtual environment as the location of project, and you all setup.

on IDE terminal you can activate the virtual environment and make sure your git is synced.

online notes:
https://www.freecodecamp.org/news/manage-multiple-python-versions-and-virtual-environments-venv-pyenv-pyvenv-a29fb00c296f/

Display local environments
==========================
pyenv virtualenvs


Activated/ deactivated with:

$ pyenv activate <name>
$ pyenv deactivate

Delete existing virtualenv
Removing the directories in $(pyenv root)/versions and $(pyenv root)/versions/{version}/envs will delete the virtualenv, or you can run:

pyenv uninstall my-virtual-env

installing specific airflow versions
pip install apache-airflow==1.10.9


DONT FORTGET !!! : add project root to PYTHONPATH on profile (.bash_profile)
https://stackoverflow.com/questions/51146723/is-adding-project-root-directory-to-sys-path-a-good-practice

pip freeze > requirements.txt in the command line to generate a requirements.txt
